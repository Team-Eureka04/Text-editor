/*
 * This Java source file was generated by the Gradle 'init' task.
 */
//Text-Editor.java file
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.filechooser.*;
import java.io.*;
import java.io.BufferedReader;
import javax.swing.text.SimpleAttributeSet;  
import javax.swing.text.StyleConstants;
import javax.swing.text.Document;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rtextarea.*;
import javax.swing.text.Element;




import javax.swing.event.*;



class TextField extends JFrame{

    RSyntaxTextArea textArea;
    JTextPane pane;
    JScrollPane scrollpane;
    JMenuBar menuBar;
    JMenu FileMenu;
    Document doc;
    JMenuItem newAction,saveAction,openAction;
    public TextField() throws BadLocationException{
        super("untitled");
        setSize(900,900);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        textArea = new RSyntaxTextArea();
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        textArea.setCodeFoldingEnabled(true);
        Container cp = getContentPane();
        SimpleAttributeSet attributeSet = new SimpleAttributeSet();
        pane = new JTextPane();
        StyleConstants.setForeground(attributeSet,Color.RED);
        StyleConstants.setBold(attributeSet,true);
        doc = pane.getStyledDocument();
        pane.setBackground(Color.DARK_GRAY);
        pane.setForeground(Color.WHITE);
        //textArea.setBackground(Color.WHITE);
        //textArea.setForeground(Color.WHITE);
        //textArea.setCaretColor(Color.BLACK);
        textArea.setAutoIndentEnabled(true);
        //textArea.setCurrentLineHighlightColor(Color.decode("#262626"));
        textArea.setLineWrap(true);
        textArea.setFont(new Font("Serif",Font.PLAIN,15));
        //System.out.println("tab size: "+textArea.getTabSize());
        //textArea.paste();
        //textArea.copy();
       // doc.addDocumentListener(new MyDocumentListener());
        //((AbstractDocument) pane.getDocument()).setDocumentFilter(new kewordFilter());
        RTextScrollPane sp = new RTextScrollPane(textArea);
        scrollpane = new JScrollPane(pane);
        // getContentPane().add(scrollpane);
        getContentPane().add(sp);
        setVisible(true);
        try{
            CreateMenu();
        }catch(BadLocationException exp)
        {
            exp.printStackTrace();
        }
        
        
    }
    public void CreateMenu() throws BadLocationException {
            menuBar = new JMenuBar();
            FileMenu = new JMenu("File");
            JMenu ThemeMenu = new JMenu("Prefrences");
            newAction = new JMenuItem("New");
            newAction.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    try{   
                        new TextField();
                    }
                    catch(BadLocationException excp)
                    {
                        excp.printStackTrace();
                    }
                }
            });
            saveAction = new JMenuItem("Save");  
            saveAction.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setDialogTitle("Specify new File");
                    fileChooser.setSelectedFile(new File("untitled"));
                    int userSelection = fileChooser.showSaveDialog(fileChooser);
                    if(userSelection == JFileChooser.APPROVE_OPTION){
                        File file = fileChooser.getSelectedFile();
                        BufferedWriter  writer = null;
                        try{
                            setTitle( file.getName());
                            writer = new BufferedWriter(new FileWriter(file.getAbsolutePath()+""));
                            writer.write(pane.getText());
                            writer.close();
                        }catch(IOException a){
                            System.out.println("Something went Wrong");
                        }
                    }
                }
            });
            // openAction = new JMenuItem("Open");
            // openAction.addActionListener(new ActionListener(){
            //     public void actionPerformed(ActionEvent e ){
            //         JFileChooser fileChooser = new JFileChooser();
            //         int ans = fileChooser.showOpenDialog(fileChooser);
            //         if(ans == JFileChooser.APPROVE_OPTION || true){
            //             //File file = fileChooser.getSelectedFile();
            //             //String filename = fileChooser.getSelectedFile().getName();
            //             //System.out.println(filename);
            //             //setTitle(filename);
            //             File file = new File("test.java");
            //             SimpleAttributeSet attributeSet = new SimpleAttributeSet();
            //             StyleConstants.setForeground(attributeSet, Color.WHITE); 
            //             StyleConstants.setFontSize(attributeSet,25);
            //             StyleConstants.setBold(attributeSet,true);
            //             SimpleAttributeSet SyntaxAttri = new SimpleAttributeSet();
            //             StyleConstants.setFontSize(SyntaxAttri,25);
            //             StyleConstants.setBold(SyntaxAttri,true);
            //             StyleConstants.setForeground(SyntaxAttri, Color.decode("#8ae234"));  
            //             try {
            //                 FileReader fr = new FileReader(file);
            //                 BufferedReader br = new BufferedReader(fr);
            //                 String s1;
            //                 String input="";   // Input word to be searched
            //                 String s=""; 
            //                 int c=0;
            //                 String space="";
            //                 int found = 0;
            //                       while((c=br.read())!=-1)
            //                       {
            //                       	if(((char)c == ' ' || c == 10) && s != "")
            //                       	{
			// 		File f1=new File("keywords.txt"); //Creation of File Descriptor for input file
			// 		String[] words=null;  //Intialize the word Array
			// 		FileReader f = new FileReader(f1);  //Creation of File Reader object
			// 		BufferedReader b = new BufferedReader(f); //Creation of BufferedReader object
                                  
            //                       	space = s;
            //                       	s = "";
            //                       	   found = 0;
            //                               // System.out.println("word: "+space);
            //                                input = space;
			// 	            while((s1=b.readLine())!=null)   //Reading Content from the file
			// 	            {
			// 	                String word=s1;
			// 	                input = input.trim();
			// 		        //System.out.println("checking: "+space+" "+word);
			// 		        if (word.equals(input))   //Search for the given 
			// 		        {
			// 		            	System.out.println("match: "+input);
					            
			// 		                try{ 
			// 		              		doc.insertString(doc.getLength(),space+" ",SyntaxAttri);
			// 		                   }
			// 		                   catch(BadLocationException exp)
			// 		                   {
			// 		                       exp.printStackTrace();
			// 		                   }
			// 		                   found = 1;
			// 		         }
			// 	            }
			// 	            if(found == 0)
			// 	            {
			// 	            	 try{ 
			//                             doc.insertString(doc.getLength(),space+" ",attributeSet);
			// 	                   }
			// 	                   catch(BadLocationException exp)
			// 	                   {
			// 	                       exp.printStackTrace();
			// 	                   }
			// 	            }
				            	
            //                                 //s="";
            //                             //}
            //                             if(c == 10){
            //                             	try{ 
			//                             doc.insertString(doc.getLength(),"\n",attributeSet);
			// 	                   }
			// 	                   catch(BadLocationException exp)
			// 	                   {
			// 	                       exp.printStackTrace();
			// 	                   }
			//                }
				                   
			// 	      }
			// 	      else{
			// 	      	s+= (char)c;
			// 	      }
                                        
            //                       } 
            //                // textArea.append(s);
            //                 br.close();
            //                 fr.close();
            //             }catch(IOException b){
            //                System.out.println("Something went wrong\n");
            //             }
            //         }
            //     }
            // });

            openAction = new JMenuItem("Open");
            openAction.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    JFileChooser fileChooser = new JFileChooser();
                    int ans = fileChooser.showOpenDialog(fileChooser);
                    if (ans == JFileChooser.APPROVE_OPTION) {
                        File file = fileChooser.getSelectedFile();
                        String filename = fileChooser.getSelectedFile().getName();
                        System.out.println(filename);
                        setTitle(filename);
                        try {
                            FileReader fr = new FileReader(file);
                            BufferedReader br = new BufferedReader(fr);
                            String s = "";
                            int c = 0;
                            while ((c = br.read()) != -1)
                                s += (char) c;
                            textArea.append(s);
                            br.close();
                            fr.close();
                        } catch (IOException b) {
                            System.out.println("Something went wrong\n");
                        }
                    }
                }
            });
            
            JMenu TabSizeMenu = new JMenu("Tab Size");
            ThemeMenu.add(TabSizeMenu);
            ButtonGroup group = new ButtonGroup();
            MyRadioButtonMenuItem radioMenuItem = new MyRadioButtonMenuItem("2");
            TabSizeMenu.add(radioMenuItem);
            group.add(radioMenuItem);
            radioMenuItem = new MyRadioButtonMenuItem("4");
            TabSizeMenu.add(radioMenuItem);
            group.add(radioMenuItem);
            radioMenuItem = new MyRadioButtonMenuItem("8");
            radioMenuItem.setSelected(true);
            TabSizeMenu.add(radioMenuItem);
            group.add(radioMenuItem);


            menuBar.add(FileMenu);
            FileMenu.add(newAction);
            FileMenu.add(saveAction);
            FileMenu.add(openAction);
            menuBar.add(ThemeMenu);
            ThemeMenu.add(TabSizeMenu);
            
            setJMenuBar(menuBar);
    }      
    private class MyRadioButtonMenuItem extends JRadioButtonMenuItem
      implements ActionListener, ItemListener {
      public MyRadioButtonMenuItem(String text) {
         super(text);
         addActionListener(this);
         addItemListener(this);
      }
      public void actionPerformed(ActionEvent e) {
         System.out.println("Item clicked: "+e.getActionCommand());
         textArea.setTabSize(Integer.parseInt(e.getActionCommand()));
      }
      public void itemStateChanged(ItemEvent e) {
         System.out.println("State changed: "+e.getStateChange()
            +" on "+((MyRadioButtonMenuItem) e.getItem()).getText());
      }
   }
   
   
   
   class kewordFilter extends DocumentFilter{
   	@Override public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, AttributeSet attr) throws BadLocationException {
        System.out.println("added:" +text);
       }
    }
   
   class MyDocumentListener implements DocumentListener{
	    String newline = "\n";
	    String word="";
	 
	    public void insertUpdate(DocumentEvent e) {
	    
	    	Element linemap = doc.getDefaultRootElement();
	    	DocumentEvent.ElementChange change = e.getChange(linemap);
	    	Element[] added = change==null ? null : change.getChildrenAdded();
	    	
	    	int numLines = linemap.getElementCount();
		int line = linemap.getElementIndex(e.getOffset());
		try{
			System.out.println("numlies: "+numLines+" "+line);
			for(Element add: added)
			{
				System.out.println("added karke: "+add);
				}
			}catch(Exception exp)
			{
			exp.printStackTrace();
			}
		String newAddition="";

		try{
		 newAddition = doc.getText(e.getOffset(),e.getLength());
		}catch(BadLocationException exp)
		{
		exp.printStackTrace();
		}
		System.out.println("newAddition: "+newAddition);
		if(newAddition.equals(" ") || newAddition.equals("\n"))
		{
			System.out.println("word: "+word);
			System.out.println("Space encountered");
			try{
				checkKeyword(e);
			}
			catch(IOException exp)
			{
				exp.printStackTrace();
			}
			word = "";
		}
		else{
			word += newAddition;
			//System.out.println("word: "+word);
		}
			
		
	    }
	    public void changedUpdate(DocumentEvent e) {
            //Plain text components don't fire these events.
	}
	public void removeUpdate(DocumentEvent e) {
	   // updateLog(e, "removed from");
	}
	    public void checkKeyword(DocumentEvent e) throws IOException{
	    
	    
	    	String words = word.trim();
	    	//System.out.println("words: "+words);
		Document doc = (Document)e.getDocument();
		String s1;
		String input="";   // Input word to be searched
		String s=""; 
		int c=0;
		String space="";
		int found = 0;
		int changeLength = e.getLength();
		File f1=null;
		FileReader f=null;
			f1=new File("keywords.txt"); //Creation of File Descriptor for input file
			f = new FileReader(f1);
		  //Creation of File Reader object
		BufferedReader b = new BufferedReader(f); //Creation of BufferedReader object
		SimpleAttributeSet SyntaxAttri = new SimpleAttributeSet();
		StyleConstants.setFontSize(SyntaxAttri,25);
		StyleConstants.setBold(SyntaxAttri,true);
		StyleConstants.setForeground(SyntaxAttri, Color.decode("#8ae234"));  
          
          	space = words;
          	   found = 0;
                   //System.out.println("word: "+space);
                   input = space;
	            while((s1=b.readLine())!=null)   //Reading Content from the file
	            {
	                String word=s1;
	                input = input.trim();
		        //System.out.println("checking: "+space+" "+word);
		        if (word.equals(input))   //Search for the given 
		        {
		            	//System.out.println("match: "+input);
		            
		                try{ 
		              		doc.insertString(doc.getLength(),space+" ",SyntaxAttri);
		                   }
		                   catch(BadLocationException exp)
		                   {
		                   	System.out.println("BadLocation error aa rha hai");
		                       exp.printStackTrace();
		                   }
		                   found = 1;
		         }
	            }
		System.out.print(
		    changeLength + " character" +
		    ((changeLength == 1) ? " " : "s ") + doc.getProperty("name") + "." + newline +
		    "  Text length = " + doc.getLength() + newline+"new char inserted: "+ words );
	    }
    }
}

public class TextEditor{
    public static void main(String args[]){
       try{ 
           new TextField();
       }
       catch(BadLocationException e)
       {
           System.out.println("Error bad location "+e);
       }
    }
}
